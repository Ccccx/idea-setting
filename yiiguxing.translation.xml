<application>
  <component name="AppStorage">
    <histories>
      <item value="REPLACE EXISTING" />
      <item value="* Sets the full set of request interceptors for the builder, overwriting any previous * interceptors." />
      <item value="delete Recursively" />
      <item value="get Canonical Path" />
      <item value="relativize" />
      <item value="A position in the bytecode of a method. Labels are used for jump, goto, and switch instructions, and for try catch blocks. A label designates the instruction that is just after. Note however that there can be other elements between a label and the instruction it designates (such as other labels, stack map frames, line numbers, etc.)." />
      <item value="visit Field Insn" />
      <item value="GETSTATIC" />
      <item value="Class Loader" />
      <item value="// The callbacks to use. Note that these callbacks must be stateless." />
      <item value="get Unique Declared Methods" />
      <item value="// The factory is calling the bean method in order to instantiate and register the bean // (i.e. via a getBean() call) -&gt; invoke the super implementation of the method to actually // create the bean instance." />
      <item value="set Naming Policy" />
      <item value="preserve Target Class" />
      <item value="// Configuration class (full or lite) or a configuration-derived @Bean method // -&gt; resolve bean class at this point..." />
      <item value="since it is not stored in an AbstractBeanDefinition subclass" />
      <item value="* Prepare the Configuration classes for servicing bean requests at runtime * by replacing them with CGLIB-enhanced subclasses." />
      <item value="reiterate" />
      <item value="get Introspected Method" />
      <item value="extract Source" />
      <item value="/ Has this effectively been overridden before (e.g. via XML)?" />
      <item value="Tracked Condition Evaluator" />
      <item value="Process superclass, if any" />
      <item value="Process default methods on interfaces" />
      <item value="// Try reading the class file via ASM for deterministic declaration order... // Unfortunately, the JVM's standard reflection returns methods in arbitrary // order, even between different runs of the same application on the same JVM." />
      <item value="config Candidates" />
      <item value="LITE" />
      <item value="CONFIGURATION CLASS LITE" />
      <item value="update Manual Singleton Names" />
      <item value="set Instance Supplier" />
      <item value="I Storage Service" />
      <item value="Detected" />
      <item value="Eagerly load the ContextClosedEvent class to avoid weird classloader issues // on application shutdown in WebLogic 8.1. (Reported by Dustin Woods.)" />
      <item value="macors" />
      <item value="The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary." />
      <item value="已存在" />
      <item value="load-point" />
      <item value="load-point marker" />
      <item value="起止点" />
      <item value="d" />
      <item value="process Candidate Bean" />
      <item value="Instantiate all remaining (non-lazy-init) singletons." />
      <item value="detect Handler Methods In Ancestor Contexts" />
      <item value="set Content Negotiation Manager" />
      <item value="MODEL ATTRIBUTE METHODS" />
      <item value="init Strategies" />
      <item value="Controller Advice" />
      <item value="Do this first, it may add ResponseBody advice beans" />
      <item value="process Common Definition Annotations" />
      <item value="is Candidate Component" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="2495" />
        <entry key="ENGLISH" value="2727" />
        <entry key="POLISH" value="2" />
        <entry key="GERMAN" value="3" />
        <entry key="FRENCH" value="19" />
        <entry key="FILIPINO" value="2" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MALTESE" value="1" />
        <entry key="MALAY" value="1" />
        <entry key="NORWEGIAN" value="3" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SPANISH" value="3" />
        <entry key="ITALIAN" value="4" />
        <entry key="HINDI" value="4" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6ad5b78ae4e20181" />
      </youdao-translate>
    </option>
  </component>
</application>