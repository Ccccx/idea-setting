<application>
  <component name="AppStorage">
    <histories>
      <item value="Verify the connector's configuration, identify and stop any process that's listening on port 8080, or configure this application to listen on another port." />
      <item value="Communications" />
      <item value="Invoker" />
      <item value="the interface or abstract class representing the factory" />
      <item value="obtain Fresh Bean Factory" />
      <item value="Initialize any placeholder property sources in the context environment." />
      <item value="resolve Required Placeholders" />
      <item value="Set the config locations for this application context. * &lt;p&gt;If not set, the implementation may use a default as appropriate." />
      <item value="helmet" />
      <item value="扫描" />
      <item value="performance" />
      <item value="dodgy code" />
      <item value="may expose internal representation by storing an externally mutable object into" />
      <item value="Priority" />
      <item value="vulnerability" />
      <item value="malicious" />
      <item value="malicious code vulnerability" />
      <item value="manifest" />
      <item value="ELIFECYCLE" />
      <item value="ELIFE CYCLE" />
      <item value="http Equiv" />
      <item value="Icon Chevron Right" />
      <item value="CONTINUE" />
      <item value="If the file is a directory then the directory must be empty. In some * implementations a directory has entries for special files or links that * are created when the directory is created. In such implementations a * directory is considered empty when only the special entries exist. * This method can be used with the {@link #walkFileTree walkFileTree} * method to delete a directory and all entries in the directory, or an * entire &lt;i&gt;file-tree&lt;/i&gt; where required." />
      <item value="p&gt; An implementation may require to examine the file to determine if the * file is a directory. Consequently this method may not be atomic with respect * to other file system operations. If the file is a symbolic link then the * symbolic link itself, not the final target of the link, is deleted." />
      <item value="Directory Not Empty Exception" />
      <item value="frontend" />
      <item value="生产" />
      <item value="生成" />
      <item value="configuration" />
      <item value="requires Unpack" />
      <item value="executions" />
      <item value="surefire" />
      <item value="conficts" />
      <item value="Failed to execute goal org.apache.maven.plugins:maven-enforcer-plugin:3.0.0-M3:enforce (enforce-banned-dependencies) on project call-driver: No rules are configured. Use the skip flag if you want to disable execution." />
      <item value="banned" />
      <item value="Exclude specific auto-configuration classes such that they will never be applied." />
      <item value="Classes for general actuator auto-configuration concerns." />
      <item value="Spring Boot Actuator has a flexible audit framework that will publish events to an `AuditEventRepository`. Once Spring Security is in play it automatically publishes authentication events by default. This can be very useful for reporting, and also to implement a lock-out policy based on authentication failures." />
      <item value="Spring Boot Actuator provides dimensional metrics by integrating with https://micrometer.io[Micrometer]." />
      <item value="Metrics" />
      <item value="* **Endpoints** Actuator endpoints allow you to monitor and interact with your application. Spring Boot includes a number of built-in endpoints and you can also add your own. For example the `health` endpoint provides basic application health information. Run up a basic application and look at `/actuator/health`." />
      <item value="Features" />
      <item value="The simplest way to enable the features is to add a dependency to the `spring-boot-starter-actuator` '`Starter`'. To add the actuator to a Maven-based project, add the following '`Starter`' dependency:" />
      <item value="Spring Boot Actuator includes a number of additional features to help you monitor and manage your application when it's pushed to production. You can choose to manage and monitor your application using HTTP or JMX endpoints. Auditing, health and metrics gathering can be automatically applied to your application." />
      <item value="Composite Health Indicator Configuration" />
      <item value="donate" />
      <item value="* Apply this {@code BeanPostProcessor} to the given new bean instance &lt;i&gt;after&lt;/i&gt; any bean * initialization callbacks (like InitializingBean's {@code afterPropertiesSet} * or a custom init-method). The bean will already be populated with property values. * The returned bean instance may be a wrapper around the original. * &lt;p&gt;In case of a FactoryBean, this callback will be invoked for both the FactoryBean * instance and the objects created by the FactoryBean (as of Spring 2.0). The * post-processor can decide whether to apply to either the FactoryBean or created * objects or both through corresponding {@code bean instanceof FactoryBean} checks. * &lt;p&gt;This callback will also be invoked after a short-circuiting triggered by a * {@link InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation} method, * in contrast to all other {@code BeanPostProcessor} callbacks. * &lt;p&gt;The default implementation returns the given {@code bean} as-is." />
      <item value="* Apply this {@code BeanPostProcessor} to the given new bean instance &lt;i&gt;before&lt;/i&gt; any bean * initialization callbacks (like InitializingBean's {@code afterPropertiesSet} * or a custom init-method). The bean will already be populated with property values. * The returned bean instance may be a wrapper around the original. * &lt;p&gt;The default implementation returns the given {@code bean} as-is." />
      <item value="Instantiation Aware Bean Post Processor" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1371" />
        <entry key="ENGLISH" value="1500" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="19" />
        <entry key="FILIPINO" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="MALTESE" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SPANISH" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6ad5b78ae4e20181" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>